<?php


/**
 * Description of AdminCajaController
 *
 * @author 01101801
 */
class AdminPosGastosControllerCore extends AdminController
{
    protected $restrict_edition = false;
    public function __construct()
    {
        $this->bootstrap = true;
        $this->table = 'pos_gastos';
        $this->className = 'PosGastos';
        $this->lang = false;
        $this->context = Context::getContext();
        $this->addRowAction('edit');
        $this->addRowAction('delete');

        parent::__construct();

        if (Context::getContext()->shop->getContext() != Shop::CONTEXT_SHOP && Shop::isFeatureActive()) {
            return $this->errors[] = $this->trans('Tiene que seleccionar una tienda antes.', array(), 'Admin.Orderscustomers.Notification');
        }

//        $this->bulk_actions = array(
//            'delete' => array(
//                'text' => $this->l('Delete selected'),
//                'confirm' => $this->l('Delete selected items?'),
//                'icon' => 'icon-trash'
//            )
//        );

        $this->_join .= 'LEFT JOIN `'._DB_PREFIX_.'employee` ea ON (ea.`id_employee` = a.`id_employee` AND a.`id_shop` = '.$this->context->shop->id.')';
        $this->_select .= 'CONCAT_WS(" ",ea.firstname, ea.lastname) as empleado';

        $this->_where = Shop::addSqlRestriction(false, 'a');

        $this->fields_list = array(
//            'id_pos_arqueoscaja' => array('title' => $this->l('ID'), 'align' => 'center', 'class' => 'fixed-width-xs'),
            'descripcion' => array('title' => $this->l('Descripción'),  'type' => 'text',),
            'monto' => array('title' => $this->l('Monto'),  'havingFilter' => true, 'type' => 'price',),
            'fecha' => array('title' => $this->l('Fecha'),  'type' => 'datetime'),
            'empleado' => array('title' => $this->l('Usuario'),  'type' => 'text',  'havingFilter' => true),
//            'estado_caja' => array('title' => $this->l('Estado'), 'align' => 'center', 'class' => 'fixed-width-sm', ),

        );

        $this->_orderBy = 'fecha';
        $this->_orderWay = 'DESC';
        
    }


    public function initPageHeaderToolbar()
    {

        if ($this->display == 'view') {
            $this->page_header_toolbar_btn['back_to_list'] = array(
                'href' => Context::getContext()->link->getAdminLink('AdminPosArqueoscaja'),
                'desc' => $this->l('Back to list', null, null, false),
                'icon' => 'process-icon-back'
            );
        }

        if (!$this->display) {
            $this->page_header_toolbar_btn['new_customer'] = array(
                'href' => self::$currentIndex . '&addpos_gastos&token=' . $this->token,
                'desc' => $this->trans('Nuevo Gasto', array(), 'Admin.Orderscustomers.Feature'),
                'icon' => 'process-icon-new'
            );
        }

        parent::initPageHeaderToolbar(); // TODO: Change the autogenerated stub
    }

    public function renderForm()
    {
        /** @var Customer $obj */
        if (!($obj = $this->loadObject(true))) {
            return;
        }


        $list_radio_comprobante = array(
            array('id' => '0', 'value' => '0', 'label' => 'Sin Comprobante'),
            array('id' => '1', 'value' => '1', 'label' => 'Con Comprobante'),
        );

        $list_type_documento = array(
            array('id' => 'factura', 'value' => 'factura', 'label' => 'Factura'),
            array('id' => 'boleta', 'value' => 'boleta', 'label' => 'Boleta'),
            array('id' => 'recibo', 'value' => 'recibo', 'label' => 'Recibo')
        );

        $this->fields_form = array(
            'legend' => array(
                'title' => $this->trans('Gasto', array(), 'Admin.Global'),
                'icon' => 'icon-money'
            ),
            'input' => array(
                array(
                    'type' => 'radio',
//                    'label' => $this->trans('', array(), 'Admin.Global'),
                    'name' => 'tiene_comprobante',
                    'required' => false,
                    'class' => 'ache_radio',
                    'values' => $list_radio_comprobante,
                    'form_group_class' => $obj->id ? 'hide': '',
                ),
                array(
                    'type' => 'date',
                    'label' => $this->trans('Fecha', array(), 'Admin.Global'),
                    'name' => 'fecha',
                    'required' => true,
//                    'col' => '4',
                ),
                array(
                    'type' => 'text',
                    'label' => $this->trans('Descripción', array(), 'Admin.Global'),
                    'name' => 'descripcion',
                    'placeholder' => 'Descripción del gasto',
                    'required' => true,
                    'col' => '4',
                ),
                array(
                    'type' => 'numeric',
                    'label' => $this->trans('Monto', array(), 'Admin.Global'),
                    'name' => 'monto',
                    'clase_form' => '',
                    'required' => true,
                    'col' => '2',
                ),
                array(
                    'type' => 'text',
                    'label' => $this->trans('RUC', array(), 'Admin.Global'),
                    'name' => 'numero_doc_iden',
//            'required' => true,
                    'col' => '4',
                    'hint' => $this->trans('RUC de la empresa que emite el comprobante', array(), 'Admin.Notifications.Info').''
                ),
                array(
                    'type' => 'text',
                    'label' => $this->trans('Razón social', array(), 'Admin.Global'),
                    'name' => 'nombre_empresa',
                    'col' => '4',
                    'hint' => $this->trans('Razón social de la empresa que emite el comprobante', array(), 'Admin.Notifications.Info').''
                ),
                array(
                    'type' => 'radio',
                    'label' => $this->trans('Tipo de comprobante', array(), 'Admin.Global'),
                    'name' => 'tipo_comprobante',
                    'class' => 'ache_radio',
                    'values' => $list_type_documento,
                    'col' => '4',
                ),
                array(
                    'type' => 'text',
                    'label' => $this->trans('Número de comprobante', array(), 'Admin.Global'),
                    'name' => 'numero_comprobante',
                    'col' => '4',
                ),
                array(
                    'form_group_class' => 'hide',
                    'type' => 'select',
                    'name' => 'id_pos_caja',
                    'options' => array(
                        'query' => PosArqueoscaja::cajasAbiertasJoinEmpleado($this->context->shop->id),
                        'id' => 'id_pos_caja',
                        'name' => 'empleado'
                    ),
                    'col' => '4',
                ),
                array(
                    'type' => 'hidden',
                    'name' => 'id_shop',
                ),
                array(
                    'type' => 'hidden',
                    'name' => 'id_employee',
                ),
            )
        );

        $this->fields_form['submit'] = array(
            'title' => $this->trans('Save', array(), 'Admin.Actions'),
        );

        $this->fields_value = array(
            'id_shop' => $this->getFieldValue($obj, 'id_shop') ? $this->getFieldValue($obj, 'id_shop') : $this->context->shop->id,
            'id_employee' => $this->getFieldValue($obj, 'id_employee') ? $this->getFieldValue($obj, 'id_employee') : $this->context->employee->id,
            'fecha' => $this->getFieldValue($obj, 'fecha') ? $this->getFieldValue($obj, 'fecha') : date('Y-m-d'),
        );

        return parent::renderForm();
    }

    public function postProcess()
    {
// checks access
        if (Tools::isSubmit('submitAdd'.$this->table) && !($this->access('add'))) {
            $this->errors[] = $this->trans('No tienes permisos para agregar gastos.', array(), 'Admin.Catalog.Notification');
            return parent::postProcess();
        }
// checks access
        if (Tools::isSubmit('submitAdd'.$this->table) && !($this->access('edit'))) {
            $this->errors[] = $this->trans('No tienes permisos para editar gastos.', array(), 'Admin.Catalog.Notification');
            return parent::postProcess();
        }
// checks access
        if (Tools::isSubmit('submitAdd'.$this->table) && !($this->access('delete'))) {
            $this->errors[] = $this->trans('No tienes permisos para borrar gastos.', array(), 'Admin.Catalog.Notification');
            return parent::postProcess();
        }

        if (Tools::getValue('submitAdd'.$this->table)) {

            /* Checking fields validity */
            $this->validateRules();
            if (!count($this->errors)) {
                $id = (int)Tools::getValue('id_'.$this->table);

                /* Object update */
                if (isset($id) && !empty($id)) {
                    try {
                        if ($this->access('edit')) {
                            $gastos = new PosGastos($id);
                            if (!Validate::isLoadedObject($gastos)) {
                                throw new PrestaShopException('Cannot load Carrier object');
                            }

                            if (Validate::isLoadedObject($gastos)) {
                                $expl_date = explode(' ', Tools::getValue('fecha'));
                                // Fill the new carrier object
                                $this->copyFromPost($gastos, $this->table);
                                $gastos->fecha = $expl_date[0].' '.date('H:i:s');
                                $gastos->update();
                                Tools::redirectAdmin(self::$currentIndex.'&id_'.$this->table.'='.$gastos->id.'&conf=4&token='.$this->token);
                            } else {
                                $this->errors[] = $this->trans('An error occurred while updating an object.', array(), 'Admin.Notifications.Error').' <b>'.$this->table.'</b>';
                            }
                        } else {
                            $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');
                        }
                    } catch (PrestaShopException $e) {
                        $this->errors[] = $e->getMessage();
                    }
                } else {
                    // Object creation
                    if ($this->access('add')) {
                        // Create new Carrier
                        $gastos = new PosGastos();
                        $this->copyFromPost($gastos, $this->table);
                        if ($gastos->fecha != null && preg_match('/^[0-9]+-[0-9]+-[0-9]+$/', $gastos->fecha)) {
                            $gastos->fecha .= ' '.date('H:i:s');
                        }
                        if ($gastos->add()) {
                            Tools::redirectAdmin(self::$currentIndex.'&id_'.$this->table.'='.$gastos->id.'&conf=4&token='.$this->token);
                        } else {
                            $this->errors[] = $this->trans('An error occurred while creating an object.', array(), 'Admin.Notifications.Error').' <b>'.$this->table.'</b>';
                        }
                    }
                    else {
                        $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');
                    }
                }
            }


        }
        parent::postProcess();
    }
}